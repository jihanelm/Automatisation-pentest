import uvicorn
from fastapi import FastAPI, Form, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel,EmailStr,constr
from typing import Dict, Any, Optional
import subprocess
import json
import os
from datetime import datetime, timedelta
import logging
import shlex
import mysql.connector
from fpdf import FPDF
import re

app = FastAPI()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Allow CORS for local development and deployment
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Update with your React app's URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Database configuration
db_config = {
    'user': 'root',
    'password': 'JiKhNa232017*',
    'host': 'localhost',
    'database': 'securefy'
}

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# JWT Configuration
SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# OAuth2PasswordBearer for token authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Utility functions for hashing and verifying passwords
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class User(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None
    disabled: Optional[bool] = None

class UserInDB(User):
    hashed_password: str


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

# Create an access token
def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Dependency to get the current user
def get_user(db, username: str):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, (username,))
        user_dict = cursor.fetchone()
        if user_dict:
            return UserInDB(**user_dict)
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
    finally:
        cursor.close()
        conn.close()
    return None
def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = get_user_by_id(user_id)
    if user is None:
        raise credentials_exception
    return user

def get_user_by_id(user_id: int):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
        user = cursor.fetchone()
        return user
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        return None
    finally:
        cursor.close()
        conn.close()

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

def authenticate_user(db, username: str, password: str):
    user = get_user(db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user

# Pydantic models
class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: constr(min_length=8)

class ScanCreate(BaseModel):
    target: str
    user_id: int
    config_id: int

class ScanResult(BaseModel):
    scan_id: int
    result_type: str
    result_data: Dict[str, Any]

@app.post("/users/", response_model=User)
async def create_user(user: UserCreate):
    hashed_password = get_password_hash(user.password)
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        query = "INSERT INTO users (username, email, password_hash) VALUES (%s, %s, %s)"
        cursor.execute(query, (user.username, user.email, hashed_password))
        conn.commit()
        user_id = cursor.lastrowid
        cursor.execute("SELECT id, username, email FROM users WHERE id = %s", (user_id,))
        user = cursor.fetchone()
        return User(id=user[0], username=user[1], email=user[2])
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        cursor.close()
        conn.close()

@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (form_data.username,))
        user = cursor.fetchone()
        if not user or not verify_password(form_data.password, user['password_hash']):
            raise HTTPException(
                status_code=401,
                detail="Incorrect username or password",
                headers={"WWW-Authenticate": "Bearer"},
            )
        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"sub": str(user['id'])}, expires_delta=access_token_expires
        )
        return {"access_token": access_token, "token_type": "bearer"}
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        cursor.close()
        conn.close()

def save_results_to_db(scan_id: int, results: Dict[str, Any]):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        for result_type, result_data in results.items():
            query = """
                INSERT INTO scan_results (scan_id, result_type, result_data)
                VALUES (%s, %s, %s)
            """
            cursor.execute(query, (scan_id, result_type, json.dumps(result_data)))

        conn.commit()
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def nmap_scan(target: str) -> str:
    start_time = datetime.now()
    logging.info(f"Starting Nmap scan at {start_time}")
    nmap_output = subprocess.run(['nmap', '-A', '-T4', target], capture_output=True, text=True)
    end_time = datetime.now()
    elapsed_time = end_time - start_time
    logging.info(f"Nmap scan completed in {elapsed_time}")
    return nmap_output.stdout

def nikto_scan(target: str, timeout_seconds: int = 300) -> str:
    start_time = datetime.now()
    logging.info(f"Starting Nikto scan at {start_time}")
    command = f'nikto -h {shlex.quote(target)}'
    try:
        nikto_output = subprocess.run(shlex.split(command), capture_output=True, text=True, timeout=timeout_seconds)
        output = nikto_output.stdout
    except subprocess.TimeoutExpired:
        output = "Nikto scan timed out."
        logging.error(output)
    except Exception as e:
        output = f"Error running Nikto scan: {str(e)}"
        logging.error(output)
    end_time = datetime.now()
    elapsed_time = end_time - start_time
    logging.info(f"Nikto scan completed in {elapsed_time}")
    return output

def sqlmap_scan(target: str) -> str:
    start_time = datetime.now()
    logging.info(f"Starting SQLMap scan at {start_time}")
    sqlmap_output = subprocess.run(['sqlmap', '-u', target], capture_output=True, text=True)
    end_time = datetime.now()
    elapsed_time = end_time - start_time
    logging.info(f"SQLMap scan completed in {elapsed_time}")
    return sqlmap_output.stdout



def run_all_scans(target: str) -> Dict[str, Any]:
    results = {}
    nmap_output = nmap_scan(target)
    nikto_output = nikto_scan(target)
    sqlmap_output = sqlmap_scan(target)

    results['nmap_scan'] = parse_nmap_results(nmap_output)
    results['nikto_scan'] = parse_nikto_results(nikto_output)
    results['sqlmap_scan'] = parse_sqlmap_results(sqlmap_output)

    return results

@app.post("/scan")
async def scan(target: str = Form(...), user_id: int = Form(...), config_id: int = Form(...)):
    results = run_all_scans(target)
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        query = "INSERT INTO scans (target_id, config_id, user_id, status, started_at) VALUES (%s, %s, %s, %s, %s)"
        target_id = 1  # Replace with actual target_id logic
        status = 'completed'
        started_at = datetime.now()
        cursor.execute(query, (target_id, config_id, user_id, status, started_at))
        scan_id = cursor.lastrowid
        conn.commit()
        save_results_to_db(scan_id, results)
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
    return {"scan_id": scan_id, "message": "Scan results saved successfully."}

@app.get("/scan-results/{scan_id}")
async def get_scan_results(scan_id: int):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        query = "SELECT * FROM scan_results WHERE scan_id = %s"
        cursor.execute(query, (scan_id,))
        results = cursor.fetchall()
        if not results:
            raise HTTPException(status_code=404, detail="Scan results not found")
        return results
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        cursor.close()
        conn.close()

# Report generation functions
def generate_pdf_report(scan_id: int, scan_results: Dict[str, Any], file_path: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt=f"Scan Report for Scan ID: {scan_id}", ln=True, align="C")
    pdf.ln(10)

    for result_type, result_data in scan_results.items():
        pdf.cell(200, 10, txt=f"{result_type.capitalize()} Results:", ln=True, align="L")
        pdf.ln(5)
        for key, value in result_data.items():
            pdf.multi_cell(0, 10, txt=f"{key}: {value}")
        pdf.ln(5)

    pdf.output(file_path)

@app.get("/generate-report/{scan_id}")
async def generate_report(scan_id: int):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        query = "SELECT result_type, result_data FROM scan_results WHERE scan_id = %s"
        cursor.execute(query, (scan_id,))
        results = cursor.fetchall()
        if not results:
            raise HTTPException(status_code=404, detail="Scan results not found")

        scan_results = {}
        for result in results:
            scan_results[result['result_type']] = json.loads(result['result_data'])

        file_path = f"/tmp/scan_report_{scan_id}.pdf"
        generate_pdf_report(scan_id, scan_results, file_path)
        return FileResponse(path=file_path, filename=f"scan_report_{scan_id}.pdf", media_type="application/pdf")
    except mysql.connector.Error as err:
        logging.error(f"Error: {err}")
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        cursor.close()
        conn.close()



if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
